class Rival {
    field TypeChart typeChart;
    field Damage damageCalculator;
    field Pokemon currentPokemon;

    constructor Rival new(TypeChart chart, Damage dmgCalculator, Pokemon initialPokemon) {
        let typeChart = chart;
        let damageCalculator = dmgCalculator;
        let currentPokemon = initialPokemon;
        return this;
    }

    method Pokemon chooseNextPokemon(Array team, Pokemon opponent) {
        var int maxScore;
        var int score;
        var int i;
        var int currentChoice;
        var int currentHP;
        var int pokemonSpeed;
        var int currentSpeed;
        let maxScore = 0;
        let i = 0;

        while (i < 6) {
            let currentChoice = team[i];
            let currentHP = currentChoice.getCurrentHP();
            if (currentHP > 0) {
                let score = evaluatePokemon(currentChoice, opponent);
                if (score > maxScore) {
                    let maxScore = score;
                    let currentPokemon = currentChoice;
                }
                let currentSpeed = currentPokemon.getSpeed();
                let pokemonSpeed = currentChoice.getSpeed();
                if (score = maxScore) {
                    if (pokemonSpeed > currentSpeed) {
                        let currentPokemon = currentChoice;
                    }
                }
            }
            let i = i + 1;
        }
        return currentPokemon;
    }

    // Evaluate the effectiveness of a Pokemon against the opponent
    method int evaluatePokemon(Pokemon candidate, Pokemon opponent) {
        var int effectiveness;
        let effectiveness = typeChart.getTypeEffectiveness(candidate.getPrimaryType(), opponent.getPrimaryType(), opponent.getSecondaryType());
        return effectiveness / 100;  // Adjust for the 10x factor used in TypeChart
    }
}
