class PokemonBattle {
    field boolean exit;
    field Starter starter;
    field int userHitPoints;
    field int compHitPoints;
    field boolean exit;
    field TypeChart typeChart;
    field TeamBuilder userTeam;
    field TeamBuilder compTeam;
    field MoveManager moveManager;
    field Damage damage;
    field Rival rival;
    field SpriteFunctions spriteFnc;
    field SpriteManager spriteMan;
    field Pokemon userCurr;

    constructor PokemonBattle new() {
        var Array playerCurrent;
        var Array rivalCurrent;
        var String chosenOne;
        do Screen.clearScreen();

        //prompt the player to select starter
        let starter = Starter.new();

        let userHitPoints = 0;
        let compHitPoints = 0;

        let exit = false;

        let typeChart = TypeChart.new();
        let damage = Damage.new();

        let moveManager = MoveManager.new();
        let spriteFnc = SpriteFunctions.new();
        let spriteMan = SpriteManager.new();

        let userTeam = TeamBuilder.new();
        let compTeam = TeamBuilder.new();

        let chosenOne = starter.getStarter();
        let playerCurrent = userTeam.createPlayerTeam(chosenOne);
        let userCurr = playerCurrent[0];
        let rivalCurrent = compTeam.createRivalTeam(chosenOne);
        let rivalCurrent = rivalCurrent[0];
        let rival = Rival.new(rivalCurrent);
        return this;
    }

    function void battle(TeamBuilder userTeam, TeamBuilder compTeam, Rival rival) {
        var Starter starterPokemon;
        var int playerFainted;
        var int rivalFainted;
        var int playerNotFainted;
        var String action;
        var int damageToTake;
        var Pokemon playerCurrent;
        var Pokemon rivalCurrent;
        var Array playerTeam;
        var Array playerMoves;
        var Moves chosenMove;
        var String chosenPokemon;
        var int playerSpeed;
        var int rivalSpeed;
        var int damageTemp;
        var int rivalHP;
        var int playerHP;

        let starterPokemon = PokemonBattle.getStarter();

        while (true) {
            //reload sprites - location 4103 for player, 2902 for rival
            //check if someone has lost
            let playerFainted = userTeam.fainted();
            if (playerFainted = 6) {
                //run lose screen
                return;
            }
            let rivalFainted = compTeam.fainted();
            if (rivalFainted = 6) {
                //victory screen
                return;
            }

            //user selects
            // var String action;  <-- can't be here but now a comment for reference
            let action = PokemonBattle.actionSelect();
            if (action = "Attack") {
                //function for selecting a move to do
                let playerCurrent = PokemonBattle.getCurrent();
                let playerMoves = playerCurrent.getMoves();
                let chosenMove = Cycle.cycleThrough(playerMoves,2);
            }
            if (action = "Switch") {
                //function for selecting a pokemon to switch out
                let playerNotFainted = 6 - playerFainted;
                let playerTeam = userTeam.playerTeamString();
                let chosenPokemon = Cycle.cycleThrough(playerTeam, playerFainted);
                do PokemonBattle.setCurrent(chosenPokemon);
            }     
            //run round
            // var int damageToTake;  <-- can't be here but now a comment for reference
            //check speed
            let playerCurrent = PokemonBattle.getCurrent();
            let playerSpeed = playerCurrent.getSpeed();
            let rivalCurrent = rival.getCurrent();
            let rivalSpeed = rivalCurrent.getSpeed();

            if (~(playerSpeed < rivalSpeed)) {
                if (action = "Attack") {
                    let damageToTake = Damage.calculateDamage(playerCurrent, chosenMove, rivalCurrent);
                    let rivalHP = rivalCurrent.getCurrentHP();
                    let damageTemp = rivalHP - damageToTake;
                    do rivalCurrent.setCurrentHP(damageTemp);
                }
                let rivalHP = rivalCurrent.getCurrentHP();
                if (rivalHP > 0) {
                    let chosenMove = rival.chooseBestMove();
                    let damageToTake = Damage.calculateDamage(rivalCurrent, chosenMove, playerCurrent);
                    let playerHP = playerCurrent.getCurrentHP();
                    let damageTemp = playerHP - damageToTake;
                    do playerCurrent.setCurrentHP(damageTemp);
                } else {
                    let rivalCurrent = rival.chooseNextPokemon();
                    do rival.setCurrent(rivalCurrent);
                }
                let playerHP = playerCurrent.getCurrentHP();
                if (~(playerHP > 0)) {
                    let playerNotFainted = 6 - playerFainted;
                    let playerTeam = userTeam.playerTeamString();
                    let chosenPokemon = Cycle.cycleThrough(playerTeam, playerFainted);
                    do PokemonBattle.setCurrent(chosenPokemon);
                }                
            }
            if (playerSpeed < rivalSpeed) {
                let chosenMove = rival.chooseBestMove(rivalCurrent, playerCurrent);
                let damageToTake = damage.calculateDamage(rivalCurrent, chosenMove, playerCurrent);
                let playerHP = playerCurrent.getCurrentHP();
                let damageTemp = playerHP - damageToTake;
                do playerCurrent.setCurrentHP(damageTemp);
                let playerHP = playerCurrent.getCurrentHP();
                if (playerHP > 0) {
                    if (action = "Attack") {
                        let damageToTake = Damage.calculateDamage(playerCurrent, chosenMove, rivalCurrent);
                        let rivalHP = rivalCurrent.getCurrentHP();
                        let damageTemp = rivalHP - damageToTake;
                        do rivalCurrent.setCurrentHP(damageTemp);
                    }
                } 
                else {
                    let playerNotFainted = 6 - playerFainted;
                    let playerTeam = userTeam.getPlayerTeam();
                    let chosenPokemon = Cycle.cycleThrough(playerTeam, playerFainted);
                    do PokemonBattle.setCurrent(chosenPokemon);
                }
                let rivalHP = rivalCurrent.getCurrentHP();
                if (~(rivalCurr.getCurrentHP() > 0)) {
                    let rivalCurrent = rival.chooseNextPokemon();
                    do rival.setCurrent(rivalCurrent);
                }
            }
        }
        return;
    }

    function String actionSelect() {
        var Array options;
        var String selected;
        let options = Array.new(2);
        let options[0] = "Attack";
        let options[1] = "Switch";
        let selected = Cycle.cycleThrough(options, 2);
        return selected;
    }

    method Pokemon getCurrent() {
        return userCurr;
    }

    method Starter getStarter() {
        return starter;
    }

    method void setCurrent(String new) {
        do BetterSpriteFunctions.pokemonClear("Player");
        do BetterSpriteFunctions.drawPlayerMon(new);
        let userCurr = new;
        return;
    }

}
