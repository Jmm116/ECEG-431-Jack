class PokemonBattle {
    field boolean exit;
    field Starter starter;
    field int userHitPoints;
    field int compHitPoints
    field boolean exit;
    field TypeChart typeChart;
    field TeamBuilder userTeam;
    field TeamBuilder compTeam;
    field MoveManager moveManager;
    field Damage damage;
    field Rival rival;
    field SpriteFunctions spriteFnc;
    field SpriteManager spriteMan;
    field Pokemon userCurr;

    constructor PokemonBattle new() {
        do Screen.clearScreen();

        //prompt the player to select starter
        let starter = Starter.new();

        let userHitPoints = 0;
        let compHitPoints = 0;

        let exit = false;

        let typeChart = TypeChart.new();
        let damage = Damage.new(typeChart);

        let moveManager = MoveManager.new();
        let spriteFnc = SpriteFunctions.new();
        let spriteMan = SpriteManager.new();

        let userTeam = TeamBuilder.new(moveManager);
        let compTeam = TeamBuilder.new(moveManager);
        
        let rival = Rival.new(typeChart,damage);

        do userTeam.createPlayerTeam(starter.getStarter());
        let userCurr = userTeam.playerTeamObjects[0];
        do compTeam.createRivalTeam(starter.getStarter());
    }

    function void newInstance() {
        let instance = PongGame.new();
        return;
    }

    function void battle(TeamBuilder userTeam, TeamBuilder compTeam) {
        while (true) {
            //reload sprites - location 4103 for player, 2902 for rival
            //check if someone has lost
            if (userTeam.fainted = 6) {
                //run lose screen
                return;
            }
            if (compTeam.fainted = 6) {
                //victory screen
                return;
            }

            //user selects
            var String action;
            let action = actionSelect();
            if (action = "Attack") {
                //function for selecting a move to do
                var Cycle cycle;
                let cycle = new Cycle(userCurr.moves,2);
                var choice;
                let choice = cycle.cycleThrough();
            }
            if (action = "Switch") {
                //function for selecting a pokemon to switch out
                var Cycle cycle;
                let cycle = new Cycle(userTeam.playerTeamString,6 - userTeam.fainted);
                var choice;
                let choice = cycle.cycleThrough();
                let userCurr = choice;
            }     
            //run round
            var int damageToTake;
            //check speed
            if (userCurr.speed >= rivalCurr.speed) {
                if (action = "Attack") {
                    let damageToTake = damage.calculateDamage(userCurr, choice, rivalCurr);
                    do rivalCurr.setCurrentHP(rivalCurr.getCurrentHP() - damageToTake)
                }
                if (rivalCurr.getCurrentHP() > 0) {
                    let damageToTake = damage.calculateDamage(rivalCurr, rival.chooseBestMove(), userCurr);
                    do userCurr.setCurrentHP(userCurr.getCurrentHP() - damageToTake)
                } else {
                    let rivalCurr = rival.chooseNextPokemon();
                }
                if (rivalCurr.getCurrentHP() <= 0) {
                    var Cycle cycle;
                    let cycle = new Cycle(userTeam.playerTeamString,6 - userTeam.fainted);
                    var choice;
                    let choice = cycle.cycleThrough();
                    //this needs to be a pokemon object
                    let userCurr = choice;
                }
                
            }
            if (userCurr.speed < rivalCurr.speed) {
                let damageToTake = damage.calculateDamage(rivalCurr, rival.chooseBestMove(), userCurr);
                do userCurr.setCurrentHP(userCurr.getCurrentHP() - damageToTake)
                if (userCurr.getCurrentHP() > 0) {
                    if (action = "Attack") {
                        let damageToTake = damage.calculateDamage(userCurr, choice, rivalCurr);
                        do rivalCurr.setCurrentHP(rivalCurr.getCurrentHP() - damageToTake)
                    }
                }
                else {
                    var Cycle cycle;
                    let cycle = new Cycle(userTeam.playerTeamString,6 - userTeam.fainted);
                    var choice;
                    let choice = cycle.cycleThrough();
                    let userCurr = choice;
                }
                if (rivalCurr.getCurrentHP() <= 0) {
                    let rivalCurr = rival.chooseNextPokemon();
                }
            }
        }
    }

    function void actionSelect() {
        var Array options;
        var int numOptions;
        var String selected;
        let options = Array.new(2);
        let options[0] = "Attack";
        let options[1] = "Switch";
        var cycle;
        let cycle = new Cycle(options,2);
        return cycle.cycleThrough();
    }
}